services:
  postgres:
    image: postgres:15-alpine
    container_name: dhcp2p-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    profiles:
      - with-postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - dhcp2p-network
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  redis:
    image: redis:7-alpine
    container_name: dhcp2p-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    profiles:
      - with-redis
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - dhcp2p-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  dhcp2p-migrate:
    build:
      context: .
      dockerfile: Dockerfile.migrate
      args:
        BUILD_VERSION: ${BUILD_VERSION}
    container_name: dhcp2p-migrate-prod
    environment:
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dhcp2p-network
    restart: "no"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    security_opt:
      - no-new-privileges:true

  dhcp2p:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_VERSION: ${BUILD_VERSION}
    container_name: dhcp2p-app-prod
    environment:
      # Database
      DATABASE_URL: ${DATABASE_URL}

      # Redis
      REDIS_URL: ${REDIS_URL}
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      # Application
      PORT: ${PORT:-8088}
      LOG_LEVEL: ${LOG_LEVEL:-info}

      # Required flags (removed - no longer needed)
      # PASSWORD: ${PASSWORD}
      # ACCOUNT: ${ACCOUNT}

      # Production configuration
      NONCE_TTL: ${NONCE_TTL:-5}
      NONCE_CLEANER_INTERVAL: ${NONCE_CLEANER_INTERVAL:-5}
      LEASE_TTL: ${LEASE_TTL:-120}
      MAX_LEASE_RETRIES: ${MAX_LEASE_RETRIES:-3}
      LEASE_RETRY_DELAY: ${LEASE_RETRY_DELAY:-500}
    ports:
      - "${PORT:-8088}:8088"
    volumes:
      - ./data:/data:rw
      - ./config:/config:ro
    depends_on:
      dhcp2p-migrate:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - dhcp2p-network
    restart: unless-stopped
    stop_grace_period: 30s
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8088/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
        reservations:
          cpus: "1.0"
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 120s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  dhcp2p-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: dhcp2p-br
