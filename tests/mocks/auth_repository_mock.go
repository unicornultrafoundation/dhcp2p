// Code generated by MockGen. DO NOT EDIT.
// Source: ../../internal/app/domain/ports/auth.go
//
// Generated by this command:
//
//	mockgen -source=../../internal/app/domain/ports/auth.go -destination=auth_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/unicornultrafoundation/dhcp2p/internal/app/domain/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
	isgomock struct{}
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// RequestAuth mocks base method.
func (m *MockAuthService) RequestAuth(ctx context.Context, request *models.AuthRequest) (*models.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestAuth", ctx, request)
	ret0, _ := ret[0].(*models.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestAuth indicates an expected call of RequestAuth.
func (mr *MockAuthServiceMockRecorder) RequestAuth(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestAuth", reflect.TypeOf((*MockAuthService)(nil).RequestAuth), ctx, request)
}

// VerifyAuth mocks base method.
func (m *MockAuthService) VerifyAuth(ctx context.Context, request *models.AuthVerifyRequest) (*models.AuthVerifyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAuth", ctx, request)
	ret0, _ := ret[0].(*models.AuthVerifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAuth indicates an expected call of VerifyAuth.
func (mr *MockAuthServiceMockRecorder) VerifyAuth(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAuth", reflect.TypeOf((*MockAuthService)(nil).VerifyAuth), ctx, request)
}
