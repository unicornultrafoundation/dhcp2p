// Code generated by MockGen. DO NOT EDIT.
// Source: ../../internal/app/domain/ports/lease.go
//
// Generated by this command:
//
//	mockgen -source=../../internal/app/domain/ports/lease.go -destination=lease_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/duchuongnguyen/dhcp2p/internal/app/domain/models"
	gomock "go.uber.org/mock/gomock"
)

// MockLeaseService is a mock of LeaseService interface.
type MockLeaseService struct {
	ctrl     *gomock.Controller
	recorder *MockLeaseServiceMockRecorder
	isgomock struct{}
}

// MockLeaseServiceMockRecorder is the mock recorder for MockLeaseService.
type MockLeaseServiceMockRecorder struct {
	mock *MockLeaseService
}

// NewMockLeaseService creates a new mock instance.
func NewMockLeaseService(ctrl *gomock.Controller) *MockLeaseService {
	mock := &MockLeaseService{ctrl: ctrl}
	mock.recorder = &MockLeaseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaseService) EXPECT() *MockLeaseServiceMockRecorder {
	return m.recorder
}

// AllocateIP mocks base method.
func (m *MockLeaseService) AllocateIP(ctx context.Context, peerID string) (*models.Lease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateIP", ctx, peerID)
	ret0, _ := ret[0].(*models.Lease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateIP indicates an expected call of AllocateIP.
func (mr *MockLeaseServiceMockRecorder) AllocateIP(ctx, peerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateIP", reflect.TypeOf((*MockLeaseService)(nil).AllocateIP), ctx, peerID)
}

// GetLeaseByPeerID mocks base method.
func (m *MockLeaseService) GetLeaseByPeerID(ctx context.Context, peerID string) (*models.Lease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaseByPeerID", ctx, peerID)
	ret0, _ := ret[0].(*models.Lease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaseByPeerID indicates an expected call of GetLeaseByPeerID.
func (mr *MockLeaseServiceMockRecorder) GetLeaseByPeerID(ctx, peerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaseByPeerID", reflect.TypeOf((*MockLeaseService)(nil).GetLeaseByPeerID), ctx, peerID)
}

// GetLeaseByTokenID mocks base method.
func (m *MockLeaseService) GetLeaseByTokenID(ctx context.Context, tokenID int64) (*models.Lease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaseByTokenID", ctx, tokenID)
	ret0, _ := ret[0].(*models.Lease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaseByTokenID indicates an expected call of GetLeaseByTokenID.
func (mr *MockLeaseServiceMockRecorder) GetLeaseByTokenID(ctx, tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaseByTokenID", reflect.TypeOf((*MockLeaseService)(nil).GetLeaseByTokenID), ctx, tokenID)
}

// ReleaseLease mocks base method.
func (m *MockLeaseService) ReleaseLease(ctx context.Context, tokenID int64, peerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseLease", ctx, tokenID, peerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseLease indicates an expected call of ReleaseLease.
func (mr *MockLeaseServiceMockRecorder) ReleaseLease(ctx, tokenID, peerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLease", reflect.TypeOf((*MockLeaseService)(nil).ReleaseLease), ctx, tokenID, peerID)
}

// RenewLease mocks base method.
func (m *MockLeaseService) RenewLease(ctx context.Context, tokenID int64, peerID string) (*models.Lease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewLease", ctx, tokenID, peerID)
	ret0, _ := ret[0].(*models.Lease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewLease indicates an expected call of RenewLease.
func (mr *MockLeaseServiceMockRecorder) RenewLease(ctx, tokenID, peerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewLease", reflect.TypeOf((*MockLeaseService)(nil).RenewLease), ctx, tokenID, peerID)
}

// MockLeaseRepository is a mock of LeaseRepository interface.
type MockLeaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLeaseRepositoryMockRecorder
	isgomock struct{}
}

// MockLeaseRepositoryMockRecorder is the mock recorder for MockLeaseRepository.
type MockLeaseRepositoryMockRecorder struct {
	mock *MockLeaseRepository
}

// NewMockLeaseRepository creates a new mock instance.
func NewMockLeaseRepository(ctrl *gomock.Controller) *MockLeaseRepository {
	mock := &MockLeaseRepository{ctrl: ctrl}
	mock.recorder = &MockLeaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaseRepository) EXPECT() *MockLeaseRepositoryMockRecorder {
	return m.recorder
}

// AllocateNewLease mocks base method.
func (m *MockLeaseRepository) AllocateNewLease(ctx context.Context, peerID string) (*models.Lease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateNewLease", ctx, peerID)
	ret0, _ := ret[0].(*models.Lease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateNewLease indicates an expected call of AllocateNewLease.
func (mr *MockLeaseRepositoryMockRecorder) AllocateNewLease(ctx, peerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateNewLease", reflect.TypeOf((*MockLeaseRepository)(nil).AllocateNewLease), ctx, peerID)
}

// FindAndReuseExpiredLease mocks base method.
func (m *MockLeaseRepository) FindAndReuseExpiredLease(ctx context.Context, peerID string) (*models.Lease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAndReuseExpiredLease", ctx, peerID)
	ret0, _ := ret[0].(*models.Lease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAndReuseExpiredLease indicates an expected call of FindAndReuseExpiredLease.
func (mr *MockLeaseRepositoryMockRecorder) FindAndReuseExpiredLease(ctx, peerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAndReuseExpiredLease", reflect.TypeOf((*MockLeaseRepository)(nil).FindAndReuseExpiredLease), ctx, peerID)
}

// GetLeaseByPeerID mocks base method.
func (m *MockLeaseRepository) GetLeaseByPeerID(ctx context.Context, peerID string) (*models.Lease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaseByPeerID", ctx, peerID)
	ret0, _ := ret[0].(*models.Lease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaseByPeerID indicates an expected call of GetLeaseByPeerID.
func (mr *MockLeaseRepositoryMockRecorder) GetLeaseByPeerID(ctx, peerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaseByPeerID", reflect.TypeOf((*MockLeaseRepository)(nil).GetLeaseByPeerID), ctx, peerID)
}

// GetLeaseByTokenID mocks base method.
func (m *MockLeaseRepository) GetLeaseByTokenID(ctx context.Context, tokenID int64) (*models.Lease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaseByTokenID", ctx, tokenID)
	ret0, _ := ret[0].(*models.Lease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaseByTokenID indicates an expected call of GetLeaseByTokenID.
func (mr *MockLeaseRepositoryMockRecorder) GetLeaseByTokenID(ctx, tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaseByTokenID", reflect.TypeOf((*MockLeaseRepository)(nil).GetLeaseByTokenID), ctx, tokenID)
}

// ReleaseLease mocks base method.
func (m *MockLeaseRepository) ReleaseLease(ctx context.Context, tokenID int64, peerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseLease", ctx, tokenID, peerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseLease indicates an expected call of ReleaseLease.
func (mr *MockLeaseRepositoryMockRecorder) ReleaseLease(ctx, tokenID, peerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLease", reflect.TypeOf((*MockLeaseRepository)(nil).ReleaseLease), ctx, tokenID, peerID)
}

// RenewLease mocks base method.
func (m *MockLeaseRepository) RenewLease(ctx context.Context, tokenID int64, peerID string) (*models.Lease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewLease", ctx, tokenID, peerID)
	ret0, _ := ret[0].(*models.Lease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewLease indicates an expected call of RenewLease.
func (mr *MockLeaseRepositoryMockRecorder) RenewLease(ctx, tokenID, peerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewLease", reflect.TypeOf((*MockLeaseRepository)(nil).RenewLease), ctx, tokenID, peerID)
}

// MockLeaseCache is a mock of LeaseCache interface.
type MockLeaseCache struct {
	ctrl     *gomock.Controller
	recorder *MockLeaseCacheMockRecorder
	isgomock struct{}
}

// MockLeaseCacheMockRecorder is the mock recorder for MockLeaseCache.
type MockLeaseCacheMockRecorder struct {
	mock *MockLeaseCache
}

// NewMockLeaseCache creates a new mock instance.
func NewMockLeaseCache(ctrl *gomock.Controller) *MockLeaseCache {
	mock := &MockLeaseCache{ctrl: ctrl}
	mock.recorder = &MockLeaseCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaseCache) EXPECT() *MockLeaseCacheMockRecorder {
	return m.recorder
}

// DeleteLease mocks base method.
func (m *MockLeaseCache) DeleteLease(ctx context.Context, peerID string, tokenID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLease", ctx, peerID, tokenID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLease indicates an expected call of DeleteLease.
func (mr *MockLeaseCacheMockRecorder) DeleteLease(ctx, peerID, tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLease", reflect.TypeOf((*MockLeaseCache)(nil).DeleteLease), ctx, peerID, tokenID)
}

// GetLeaseByPeerID mocks base method.
func (m *MockLeaseCache) GetLeaseByPeerID(ctx context.Context, peerID string) (*models.Lease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaseByPeerID", ctx, peerID)
	ret0, _ := ret[0].(*models.Lease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaseByPeerID indicates an expected call of GetLeaseByPeerID.
func (mr *MockLeaseCacheMockRecorder) GetLeaseByPeerID(ctx, peerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaseByPeerID", reflect.TypeOf((*MockLeaseCache)(nil).GetLeaseByPeerID), ctx, peerID)
}

// GetLeaseByTokenID mocks base method.
func (m *MockLeaseCache) GetLeaseByTokenID(ctx context.Context, tokenID int64) (*models.Lease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaseByTokenID", ctx, tokenID)
	ret0, _ := ret[0].(*models.Lease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaseByTokenID indicates an expected call of GetLeaseByTokenID.
func (mr *MockLeaseCacheMockRecorder) GetLeaseByTokenID(ctx, tokenID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaseByTokenID", reflect.TypeOf((*MockLeaseCache)(nil).GetLeaseByTokenID), ctx, tokenID)
}

// SetLease mocks base method.
func (m *MockLeaseCache) SetLease(ctx context.Context, lease *models.Lease) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLease", ctx, lease)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLease indicates an expected call of SetLease.
func (mr *MockLeaseCacheMockRecorder) SetLease(ctx, lease any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLease", reflect.TypeOf((*MockLeaseCache)(nil).SetLease), ctx, lease)
}
