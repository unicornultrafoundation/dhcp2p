// Code generated by MockGen. DO NOT EDIT.
// Source: ../../internal/app/domain/ports/nonce.go
//
// Generated by this command:
//
//	mockgen -source=../../internal/app/domain/ports/nonce.go -destination=nonce_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/duchuongnguyen/dhcp2p/internal/app/domain/models"
	gomock "go.uber.org/mock/gomock"
)

// MockNonceRepository is a mock of NonceRepository interface.
type MockNonceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNonceRepositoryMockRecorder
	isgomock struct{}
}

// MockNonceRepositoryMockRecorder is the mock recorder for MockNonceRepository.
type MockNonceRepositoryMockRecorder struct {
	mock *MockNonceRepository
}

// NewMockNonceRepository creates a new mock instance.
func NewMockNonceRepository(ctrl *gomock.Controller) *MockNonceRepository {
	mock := &MockNonceRepository{ctrl: ctrl}
	mock.recorder = &MockNonceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNonceRepository) EXPECT() *MockNonceRepositoryMockRecorder {
	return m.recorder
}

// ConsumeNonce mocks base method.
func (m *MockNonceRepository) ConsumeNonce(ctx context.Context, nonceID, peerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeNonce", ctx, nonceID, peerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeNonce indicates an expected call of ConsumeNonce.
func (mr *MockNonceRepositoryMockRecorder) ConsumeNonce(ctx, nonceID, peerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeNonce", reflect.TypeOf((*MockNonceRepository)(nil).ConsumeNonce), ctx, nonceID, peerID)
}

// CreateNonce mocks base method.
func (m *MockNonceRepository) CreateNonce(ctx context.Context, peerID string) (*models.Nonce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNonce", ctx, peerID)
	ret0, _ := ret[0].(*models.Nonce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNonce indicates an expected call of CreateNonce.
func (mr *MockNonceRepositoryMockRecorder) CreateNonce(ctx, peerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNonce", reflect.TypeOf((*MockNonceRepository)(nil).CreateNonce), ctx, peerID)
}

// DeleteExpiredNonces mocks base method.
func (m *MockNonceRepository) DeleteExpiredNonces(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredNonces", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredNonces indicates an expected call of DeleteExpiredNonces.
func (mr *MockNonceRepositoryMockRecorder) DeleteExpiredNonces(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredNonces", reflect.TypeOf((*MockNonceRepository)(nil).DeleteExpiredNonces), ctx)
}

// GetNonce mocks base method.
func (m *MockNonceRepository) GetNonce(ctx context.Context, nonceID string) (*models.Nonce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", ctx, nonceID)
	ret0, _ := ret[0].(*models.Nonce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockNonceRepositoryMockRecorder) GetNonce(ctx, nonceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockNonceRepository)(nil).GetNonce), ctx, nonceID)
}

// MockNonceCache is a mock of NonceCache interface.
type MockNonceCache struct {
	ctrl     *gomock.Controller
	recorder *MockNonceCacheMockRecorder
	isgomock struct{}
}

// MockNonceCacheMockRecorder is the mock recorder for MockNonceCache.
type MockNonceCacheMockRecorder struct {
	mock *MockNonceCache
}

// NewMockNonceCache creates a new mock instance.
func NewMockNonceCache(ctrl *gomock.Controller) *MockNonceCache {
	mock := &MockNonceCache{ctrl: ctrl}
	mock.recorder = &MockNonceCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNonceCache) EXPECT() *MockNonceCacheMockRecorder {
	return m.recorder
}

// CreateNonce mocks base method.
func (m *MockNonceCache) CreateNonce(ctx context.Context, nonce *models.Nonce) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNonce", ctx, nonce)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNonce indicates an expected call of CreateNonce.
func (mr *MockNonceCacheMockRecorder) CreateNonce(ctx, nonce any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNonce", reflect.TypeOf((*MockNonceCache)(nil).CreateNonce), ctx, nonce)
}

// DeleteNonce mocks base method.
func (m *MockNonceCache) DeleteNonce(ctx context.Context, nonceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNonce", ctx, nonceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNonce indicates an expected call of DeleteNonce.
func (mr *MockNonceCacheMockRecorder) DeleteNonce(ctx, nonceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNonce", reflect.TypeOf((*MockNonceCache)(nil).DeleteNonce), ctx, nonceID)
}

// GetNonce mocks base method.
func (m *MockNonceCache) GetNonce(ctx context.Context, nonceID string) (*models.Nonce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", ctx, nonceID)
	ret0, _ := ret[0].(*models.Nonce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockNonceCacheMockRecorder) GetNonce(ctx, nonceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockNonceCache)(nil).GetNonce), ctx, nonceID)
}

// MockNonceService is a mock of NonceService interface.
type MockNonceService struct {
	ctrl     *gomock.Controller
	recorder *MockNonceServiceMockRecorder
	isgomock struct{}
}

// MockNonceServiceMockRecorder is the mock recorder for MockNonceService.
type MockNonceServiceMockRecorder struct {
	mock *MockNonceService
}

// NewMockNonceService creates a new mock instance.
func NewMockNonceService(ctrl *gomock.Controller) *MockNonceService {
	mock := &MockNonceService{ctrl: ctrl}
	mock.recorder = &MockNonceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNonceService) EXPECT() *MockNonceServiceMockRecorder {
	return m.recorder
}

// CreateNonce mocks base method.
func (m *MockNonceService) CreateNonce(ctx context.Context, peerID string) (*models.Nonce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNonce", ctx, peerID)
	ret0, _ := ret[0].(*models.Nonce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNonce indicates an expected call of CreateNonce.
func (mr *MockNonceServiceMockRecorder) CreateNonce(ctx, peerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNonce", reflect.TypeOf((*MockNonceService)(nil).CreateNonce), ctx, peerID)
}

// VerifyNonce mocks base method.
func (m *MockNonceService) VerifyNonce(ctx context.Context, request *models.NonceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyNonce", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyNonce indicates an expected call of VerifyNonce.
func (mr *MockNonceServiceMockRecorder) VerifyNonce(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyNonce", reflect.TypeOf((*MockNonceService)(nil).VerifyNonce), ctx, request)
}

// MockNonceCleaner is a mock of NonceCleaner interface.
type MockNonceCleaner struct {
	ctrl     *gomock.Controller
	recorder *MockNonceCleanerMockRecorder
	isgomock struct{}
}

// MockNonceCleanerMockRecorder is the mock recorder for MockNonceCleaner.
type MockNonceCleanerMockRecorder struct {
	mock *MockNonceCleaner
}

// NewMockNonceCleaner creates a new mock instance.
func NewMockNonceCleaner(ctrl *gomock.Controller) *MockNonceCleaner {
	mock := &MockNonceCleaner{ctrl: ctrl}
	mock.recorder = &MockNonceCleanerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNonceCleaner) EXPECT() *MockNonceCleanerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockNonceCleaner) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockNonceCleanerMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockNonceCleaner)(nil).Run), ctx)
}
