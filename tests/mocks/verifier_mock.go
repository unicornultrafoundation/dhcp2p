// Code generated by MockGen. DO NOT EDIT.
// Source: ../../internal/app/domain/ports/verifier.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSignatureVerifier is a mock of SignatureVerifier interface.
type MockSignatureVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockSignatureVerifierMockRecorder
}

// MockSignatureVerifierMockRecorder is the mock recorder for MockSignatureVerifier.
type MockSignatureVerifierMockRecorder struct {
	mock *MockSignatureVerifier
}

// NewMockSignatureVerifier creates a new mock instance.
func NewMockSignatureVerifier(ctrl *gomock.Controller) *MockSignatureVerifier {
	mock := &MockSignatureVerifier{ctrl: ctrl}
	mock.recorder = &MockSignatureVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignatureVerifier) EXPECT() *MockSignatureVerifierMockRecorder {
	return m.recorder
}

// VerifySignature mocks base method.
func (m *MockSignatureVerifier) VerifySignature(ctx context.Context, pubKey, payload, signature []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySignature", ctx, pubKey, payload, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifySignature indicates an expected call of VerifySignature.
func (mr *MockSignatureVerifierMockRecorder) VerifySignature(ctx, pubKey, payload, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySignature", reflect.TypeOf((*MockSignatureVerifier)(nil).VerifySignature), ctx, pubKey, payload, signature)
}
