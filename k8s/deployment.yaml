apiVersion: apps/v1
kind: Deployment
metadata:
  name: dhcp2p
  namespace: dhcp2p
  labels:
    app: dhcp2p
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: dhcp2p
  template:
    metadata:
      labels:
        app: dhcp2p
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8088"
        prometheus.io/path: "/metrics"
    spec:
      # Security Context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      # Service Account (create if needed for RBAC)
      # serviceAccountName: dhcp2p
      
      # Init Container for migrations (optional - migrations run in entrypoint)
      # Uncomment if you want to separate migration logic
      # initContainers:
      #   - name: migrate
      #     image: dhcp2p:latest
      #     command: ["/bin/sh", "-c"]
      #     args:
      #       - |
      #         atlas migrate apply \
      #           --dir "file:///migrations" \
      #           --url "$DATABASE_URL"
      #     envFrom:
      #       - secretRef:
      #           name: dhcp2p-secrets
      #     envFrom:
      #       - configMapRef:
      #           name: dhcp2p-config
      
      containers:
      - name: dhcp2p
        image: dhcp2p:latest  # Change to your registry image
        imagePullPolicy: IfNotPresent
        
        # Ports
        ports:
        - name: http
          containerPort: 8088
          protocol: TCP
        
        # Environment Variables
        envFrom:
        - configMapRef:
            name: dhcp2p-config
        - secretRef:
            name: dhcp2p-secrets
        
        # Resource Limits
        resources:
          requests:
            cpu: "500m"
            memory: "512Mi"
          limits:
            cpu: "2000m"
            memory: "2Gi"
        
        # Health Checks
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        # Security Context for container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Set to true if app doesn't write to root filesystem
          capabilities:
            drop:
            - ALL
        
        # Volume Mounts (if needed for logs or data)
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: data
          mountPath: /home/dhcp2p/logs
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir: {}
      - name: data
        emptyDir: {}
      
      # Affinity Rules (optional - for pod distribution)
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - dhcp2p
              topologyKey: kubernetes.io/hostname

