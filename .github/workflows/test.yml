name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', '**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
    
    - name: Install mockgen
      run: go install github.com/golang/mock/mockgen@latest
    
    - name: Generate mocks
      run: make test-mocks
    
    - name: Update go.sum for new dependencies
      run: go mod tidy
    
    - name: Run unit tests
      run: make test-unit
    
    - name: Create .env file for integration tests
      run: |
        cat > .env << EOF
        POSTGRES_DB=dhcp2p_test
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=postgres
        DATABASE_URL=postgres://postgres:postgres@localhost:5432/dhcp2p_test?sslmode=disable
        EOF
    
    - name: Start only database services for integration tests
      run: |
        docker compose --env-file .env up -d postgres redis
        
    - name: Wait for database services to be ready
      run: |
        echo "Waiting for PostgreSQL..."
        for i in {1..30}; do
          if docker exec dhcp2p-postgres pg_isready -U postgres -d dhcp2p_test; then
            echo "PostgreSQL is ready!"
            break
          else
            echo "Waiting for PostgreSQL... ($i/30)"
            sleep 2
          fi
        done
        
        echo "Waiting for Redis..."
        for i in {1..30}; do
          if docker exec dhcp2p-redis redis-cli ping; then
            echo "Redis is ready!"
            break
          else
            echo "Waiting for Redis... ($i/30)"
            sleep 2
          fi
        done
    
    - name: Run integration tests
      run: make test-integration
      env:
        DB_URL: postgres://postgres:postgres@localhost:5432/dhcp2p_test?sslmode=disable
        REDIS_URL: redis://localhost:6379
    
    - name: Create .env file for Docker Compose
      run: |
        cat > .env << EOF
        POSTGRES_DB=dhcp2p_test
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=postgres
        DATABASE_URL=postgres://postgres:postgres@postgres:5432/dhcp2p_test?sslmode=disable
        REDIS_URL=redis:6379
        REDIS_PASSWORD=
        PORT=8088
        LOG_LEVEL=debug
        NONCE_TTL=5
        NONCE_CLEANER_INTERVAL=5
        LEASE_TTL=120
        MAX_LEASE_RETRIES=3
        LEASE_RETRY_DELAY=500
        BUILD_VERSION=ci
        RUN_MIGRATIONS=true
        EOF
    
    - name: Stop database services before starting full stack
      run: |
        docker compose --env-file .env down
        
    - name: Start application for e2e tests
      run: make docker-up
    
    - name: Wait for application to be ready
      run: |
        echo "Waiting for application to start..."
        for i in {1..30}; do
          if curl -f http://localhost:8088/health; then
            echo "Application is ready!"
            break
          else
            echo "Waiting for application... ($i/30)"
            sleep 2
          fi
        done
    
    - name: Run e2e tests
      run: make test-e2e
      env:
        BASE_URL: http://localhost:8088
    
    - name: Stop application
      if: always()
      run: make docker-down
    
    - name: Generate coverage report
      run: make test-coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        fail_ci_if_error: false
    
    - name: Coverage Summary
      run: |
        echo "## ðŸ“Š Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        go tool cover -func=coverage.out >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.html
          coverage.out
        retention-days: 30
