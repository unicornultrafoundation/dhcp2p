name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dhcp2p_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum', '**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
    
    - name: Install mockgen
      run: go install github.com/golang/mock/mockgen@latest
    
    - name: Generate mocks
      run: make test-mocks
    
    - name: Update go.sum for new dependencies
      run: go mod tidy
    
    - name: Run unit tests
      run: make test-unit
    
    - name: Run integration tests
      run: make test-integration
      env:
        DB_URL: postgres://postgres:postgres@localhost:5432/dhcp2p_test?sslmode=disable
        REDIS_URL: redis://localhost:6379/1
    
    - name: Start application for e2e tests
      run: make docker-up
      env:
        DB_URL: postgres://postgres:postgres@localhost:5432/dhcp2p_test?sslmode=disable
        REDIS_URL: redis://localhost:6379/2
    
    - name: Wait for application to be ready
      run: |
        echo "Waiting for application to start..."
        for i in {1..30}; do
          if curl -f http://localhost:8088/health; then
            echo "Application is ready!"
            break
          else
            echo "Waiting for application... ($i/30)"
            sleep 2
          fi
        done
    
    - name: Run e2e tests
      run: make test-e2e
      env:
        BASE_URL: http://localhost:8088
    
    - name: Stop application
      if: always()
      run: make docker-down
    
    - name: Generate coverage report
      run: make test-coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        fail_ci_if_error: false
    
    - name: Coverage Summary
      run: |
        echo "## ðŸ“Š Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        go tool cover -func=coverage.out >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.html
          coverage.out
        retention-days: 30
