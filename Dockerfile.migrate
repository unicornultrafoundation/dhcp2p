# syntax=docker/dockerfile:1
FROM golang:1.25-alpine AS builder

# Install git and ca-certificates for fetching dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go mod files first for better layer caching
COPY go.mod go.sum ./

# Download dependencies with cache mount
RUN --mount=type=cache,target=/go/pkg/mod \
    go mod download

# Copy source code
COPY . .

# Build the binary with optimizations
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \
    go build -ldflags="-w -s -X main.Build=${BUILD_VERSION:-dev}" \
    -o dhcp2p ./cmd/dhcp2p

# Final stage - Alpine with Atlas CLI
FROM alpine:latest

# Install Atlas CLI and other dependencies
RUN apk add --no-cache \
    curl \
    postgresql-client \
    ca-certificates \
    tzdata

# Install Atlas CLI (install to /usr/local/bin to ensure it's on PATH)
RUN curl -sSfL https://atlasgo.sh | sh -s -- -b /usr/local/bin

# Copy migration files
COPY --from=builder /app/internal/app/infrastructure/migrations /migrations

# Copy the binary (for potential future migration hooks)
COPY --from=builder /app/dhcp2p /usr/local/bin/dhcp2p

# Set working directory
WORKDIR /migrations

# Create entrypoint script
RUN echo '#!/bin/sh' > /entrypoint.sh && \
    echo 'set -e' >> /entrypoint.sh && \
    echo 'echo "Running database migrations..."' >> /entrypoint.sh && \
    echo 'atlas migrate apply --dir file:///migrations --url "$DATABASE_URL"' >> /entrypoint.sh && \
    echo 'echo "Migrations completed successfully"' >> /entrypoint.sh && \
    chmod +x /entrypoint.sh

# Run migrations
ENTRYPOINT ["/entrypoint.sh"]
