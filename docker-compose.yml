services:
  postgres:
    image: postgres:15-alpine
    container_name: dhcp2p-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dhcp2p}
      POSTGRES_USER: ${POSTGRES_USER:-dhcp2p}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-dhcp2p} -d ${POSTGRES_DB:-dhcp2p}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - dhcp2p-network

  redis:
    image: redis:7-alpine
    container_name: dhcp2p-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - dhcp2p-network

  dhcp2p:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_VERSION: ${BUILD_VERSION:-dev}
    container_name: dhcp2p-app
    environment:
      # Database
      DATABASE_URL: ${DATABASE_URL}

      # Redis (address only; no scheme)
      REDIS_URL: ${REDIS_URL:-redis:6379}

      # Application
      PORT: ${PORT:-8088}
      LOG_LEVEL: ${LOG_LEVEL:-debug}

      # Migration control
      RUN_MIGRATIONS: ${RUN_MIGRATIONS:-true}

      # Optional configuration
      NONCE_TTL: ${NONCE_TTL:-5}
      NONCE_CLEANER_INTERVAL: ${NONCE_CLEANER_INTERVAL:-5}
      LEASE_TTL: ${LEASE_TTL:-120}
      MAX_LEASE_RETRIES: ${MAX_LEASE_RETRIES:-3}
      LEASE_RETRY_DELAY: ${LEASE_RETRY_DELAY:-500}
    volumes:
      - ./data:/data:rw
      - ./config:/config:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dhcp2p-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8088/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  dhcp2p-network:
    driver: bridge
